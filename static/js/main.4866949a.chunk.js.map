{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","movie","original_title","src","poster_path","title","release_date","CardList","movies","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","data","results","catch","err","console","log","this","filteredMovies","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mTAIaA,G,MAAO,SAAAC,GAAK,OAEjB,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,WAAWC,IAAKF,EAAMG,MAAMC,eAAgBC,IAAG,UAJ5D,oCAI4D,OAAcL,EAAMG,MAAMG,eACvF,4BAAKN,EAAMG,MAAMI,OAChB,2BAAIP,EAAMG,MAAMK,iBCJjBC,G,MAAW,SAACT,GACvB,OACE,yBAAKC,UAAU,aACZD,EAAMU,OAAOC,KAAI,SAACR,GAAD,OAChB,kBAAC,EAAD,CAAMS,IAAKT,EAAMU,GAAIV,MAAOA,UCHvBW,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAErB,2BACCf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCAG,G,wDAvCb,aAAe,IAAD,8BACZ,gBAeFH,aAAc,SAAAI,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAfpC,EAAKC,MAAQ,CACXf,OAAQ,GACRY,YAAY,IAJF,E,gEAQO,IAAD,OAClBI,MAAM,GAAD,OAdG,gCAcH,OAbK,qBAaL,OAZG,2CAYH,2BACFC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKT,SAAS,CAAEX,OAAQoB,EAAKC,aAC5CC,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,+BAQR,IAAD,EACsBG,KAAKX,MAA3Bf,EADA,EACAA,OAAQY,EADR,EACQA,YACTe,EAAiB3B,EAAO4B,QAAO,SAAAnC,GAAK,OACxCA,EAAMI,MAAMgC,cAAcC,SAASlB,EAAYiB,kBAEjD,OACE,yBAAKtC,UAAU,OACb,oDACC,kBAAC,EAAD,CACCc,YAAY,gBACZC,aAAgBoB,KAAKpB,eAEvB,kBAAC,EAAD,CAAUN,OAAQ2B,S,GAlCRI,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.4866949a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.css'\r\nconst imgUrl= 'https://image.tmdb.org/t/p/w500/';\r\nexport const Card = props => (\r\n   \r\n        <div className='card-container'>\r\n            <img className=\"img-size\" alt={props.movie.original_title} src={`${imgUrl}${props.movie.poster_path}`} />\r\n             <h2>{props.movie.title}</h2>\r\n              <p>{props.movie.release_date}</p>\r\n        </div>\r\n    );\r\n\r\n","import React from \"react\";\r\nimport {Card} from '../card/card'\r\n\r\nimport \"./card-list.css\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.movies.map((movie) => (\r\n        <Card key={movie.id} movie={movie} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport './search-box.css';\r\n\r\n\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n   \r\n    <input \r\n     className='search'\r\n     type='search'\r\n     placeholder={placeholder} \r\n     onChange={handleChange}\r\n     />\r\n    \r\n)","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list\";\nimport {SearchBox} from \"./components/search-box/search-box\";\nimport \"./App.css\";\n\n/*  'https://api.themoviedb.org/3/movie/top_rated?api_key=95de7de7e6d310341b6b95a4b35b102b&language=en-US&page=1'*/\n\nconst url = \"https://api.themoviedb.org/3\";\nconst field = \"/movie/top_rated?\";\nconst key = \"api_key=95de7de7e6d310341b6b95a4b35b102b\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      searchField:''\n    };\n   \n  }\n  componentDidMount() {\n    fetch(`${url}${field}${key}&language=en-US&page=1`)\n      .then((response) => response.json())\n      .then((data) => this.setState({ movies: data.results }))\n      .catch((err) => {\n        console.log(err);\n      });\n    }\n  handleChange= e =>{\n    this.setState({searchField:e.target.value})\n  }\n \n\n  render() {\n    const {movies, searchField}= this.state;\n    const filteredMovies = movies.filter(movie =>\n      movie.title.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className=\"App\">\n        <h1>The top rated movies</h1>\n         <SearchBox \n          placeholder='search movies' \n          handleChange = {this.handleChange}\n          />\n        <CardList movies={filteredMovies} />\n       </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}